// This class handles all communication with the WebSocket (WS) server.
// The WS server is an intermediary between the browser and Netrek (NT) server.
// Sort of like a proxy, but it does a little more (e.g., metaserver queries).
// See node/server.node.js for the protocol and code
NetrekConnection = function(webhost, webport, callback) {

    this.host = webhost || "localhost";
	this.port = webport || 8080;
	
	this.conn = io.connect("ws://"+this.host+":"+this.port);
	this.conn.once("connect",callback);
	
    // the stream of Netrek messages we haven't resolved yet
    this.buffer = "";

    // getServerList: Ask the WS which NT servers are available.
    // This function expects a callback, which is provided an array of objects:
    //      [{ host:"...", port:####, status:"..." }, ...]
    //
    // (note that the WS should query the meta server for this info, but it is
    //  possible the WS could just lie and/or list only a few favored servers)
    this.getServerList = function(callback) {
        this.conn.emit("serverDataReq");
        this.once("serverData", function(serverList) {
            callback(serverList);
        })
    }

    // connectToServer: tell the WS server we want to join a server
    // Sets up a message listener, which expects Netrek data
	this.connectToServer = function(host, port, callback) {
		port = port || 2592;
        _self = this;
		this.conn.once('serverConnected', function() {
			this.send(packer.pack("!bbbxI",[27,4,10,0]));
			this.on('message', function(e) {
                _self.buffer += e;
            });
		    callback();
		});
		this.conn.emit('joinServer', {host:host, port:port});
	}

    // readNextMessage: read the next message from the server and act on it
    // Messages are read from this object's buffer, which stores all incoming
    // data messages.  Once read, messages are removed from the buffer.
    this.readNextMessage = function(numBytes) {
        // get the message type
        var msgCode = this.buffer[0];
        var msgClass = serverPackets[msgCode];
        // get the length of the message and skim data off the buffer
        var length = packer.calcLength(msgClass.format);
        var data = this.buffer.substr(0,length);
        this.buffer = this.buffer.substr(length);
        // send data to the handler for this message type
        msgClass.handler(data);
    }    

}


// all server packet types listed below
// see http://james.tooraweenah.com/darcs/netrek-server/Vanilla/include/packets.h for an explanation of how the netrek protocol works
serverPackets = [
{ // MOTD
  code: 11,
  format: '!bxxx80s',
  handler: function(data) {
    var unpacked = packer.unpack(this.format, data);
    var message = unpacked[1];
    alert(message);
  }
},

]

// index all packets by code
var sp = [];
for(var i=0;i<serverPackets.length;++i) {
  sp[serverPackets[i].code] = serverPackets[i];
}
